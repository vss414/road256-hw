// Code generated by MockGen. DO NOT EDIT.
// Source: ./player.go

// Package mock_player is a generated GoMock package.
package mock_player

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "gitlab.ozon.dev/vss414/hw-1/internal/pkg/core/player/model"
)

// MockIPlayer is a mock of IPlayer interface.
type MockIPlayer struct {
	ctrl     *gomock.Controller
	recorder *MockIPlayerMockRecorder
}

// MockIPlayerMockRecorder is the mock recorder for MockIPlayer.
type MockIPlayerMockRecorder struct {
	mock *MockIPlayer
}

// NewMockIPlayer creates a new mock instance.
func NewMockIPlayer(ctrl *gomock.Controller) *MockIPlayer {
	mock := &MockIPlayer{ctrl: ctrl}
	mock.recorder = &MockIPlayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlayer) EXPECT() *MockIPlayerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPlayer) Create(ctx context.Context, p *model.Player) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPlayerMockRecorder) Create(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPlayer)(nil).Create), ctx, p)
}

// Delete mocks base method.
func (m *MockIPlayer) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPlayerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPlayer)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockIPlayer) Get(ctx context.Context, id uint64) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPlayerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPlayer)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockIPlayer) List(ctx context.Context, limit, page uint64, order, direction string) ([]*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, page, order, direction)
	ret0, _ := ret[0].([]*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPlayerMockRecorder) List(ctx, limit, page, order, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPlayer)(nil).List), ctx, limit, page, order, direction)
}

// Update mocks base method.
func (m *MockIPlayer) Update(ctx context.Context, p *model.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIPlayerMockRecorder) Update(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPlayer)(nil).Update), ctx, p)
}
